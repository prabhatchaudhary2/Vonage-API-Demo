'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _StreamResource = require('./StreamResource');

var _StreamResource2 = _interopRequireDefault(_StreamResource);

var _TalkResource = require('./TalkResource');

var _TalkResource2 = _interopRequireDefault(_TalkResource);

var _DtmfResource = require('./DtmfResource');

var _DtmfResource2 = _interopRequireDefault(_DtmfResource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `calls` resource.
 */

var CallsResource = function () {
  _createClass(CallsResource, null, [{
    key: 'PATH',


    /**
     * The path to the `calls` resource.
     */
    get: function get() {
      return '/v1/calls';
    }

    /**
     * Creates a new CallsResource.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function CallsResource(creds, options) {
    _classCallCheck(this, CallsResource);

    this.creds = creds;
    this.options = options;

    /**
     * @type StreamController
     */
    this.stream = new _StreamResource2.default(this.creds, this.options);

    /**
     * @type TalkResource
     */
    this.talk = new _TalkResource2.default(this.creds, this.options);

    /**
     * @type DtmfResource
     */
    this.dtmf = new _DtmfResource2.default(this.creds, this.options);
  }

  /**
   * Create a new call.
   *
   * @param {Object} params - Parameters used when creating the call. See https://docs.dev.nexmoinc.net/voice/voice-api/api-reference#call_create for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(CallsResource, [{
    key: 'create',
    value: function create(params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: 'api.nexmo.com',
        path: CallsResource.PATH,
        method: 'POST',
        body: params,
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': params.length,
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get an existing call.
     *
     * @param {string|object} query - The unique identifier for the call to retrieve
     *               or a set of filter parameters for the query. For more information
     *               see https://docs.nexmo.com/voice/voice-api/api-reference#call_retrieve
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: 'get',
    value: function get(query, callback) {
      if (!query) {
        throw new Error('"query" is a required parameter');
      }

      var pathExt = '';
      if (typeof query === 'string') {
        // single call Id
        pathExt = '/' + query;
      } else if ((typeof query === 'undefined' ? 'undefined' : _typeof(query)) === 'object' && Object.keys(query).length > 0) {
        // filter
        pathExt = '?' + _querystring2.default.stringify(query);
      }

      var config = {
        host: 'api.nexmo.com',
        path: '' + CallsResource.PATH + pathExt,
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Update an existing call.
     *
     * @param {string} [callId] - The unique identifier for the call to update.
     * @param {Object} params - Parameters used when updating the call. See https://docs.dev.nexmoinc.net/voice/voice-api/api-reference#call_modify_single for more information.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: 'update',
    value: function update(callId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: 'api.nexmo.com',
        path: CallsResource.PATH + '/' + callId,
        method: 'PUT',
        body: params,
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': params.length,
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }
  }]);

  return CallsResource;
}();

exports.default = CallsResource;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DYWxsc1Jlc291cmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7O0lBS00sYTs7Ozs7Ozs7d0JBS2M7QUFDaEIsYUFBTyxXQUFQO0FBQ0Q7Ozs7Ozs7Ozs7O0FBUUQseUJBQVksS0FBWixFQUFtQixPQUFuQixFQUE0QjtBQUFBOztBQUMxQixTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsU0FBSyxPQUFMLEdBQWUsT0FBZjs7Ozs7QUFLQSxTQUFLLE1BQUwsR0FBYyw2QkFBbUIsS0FBSyxLQUF4QixFQUErQixLQUFLLE9BQXBDLENBQWQ7Ozs7O0FBS0EsU0FBSyxJQUFMLEdBQVksMkJBQWlCLEtBQUssS0FBdEIsRUFBNkIsS0FBSyxPQUFsQyxDQUFaOzs7OztBQUtBLFNBQUssSUFBTCxHQUFZLDJCQUFpQixLQUFLLEtBQXRCLEVBQTZCLEtBQUssT0FBbEMsQ0FBWjtBQUNEOzs7Ozs7Ozs7Ozs7MkJBUU0sTSxFQUFRLFEsRUFBVTtBQUN2QixlQUFTLEtBQUssU0FBTCxDQUFlLE1BQWYsQ0FBVDs7QUFFQSxVQUFJLFNBQVM7QUFDWCxjQUFNLGVBREs7QUFFWCxjQUFNLGNBQWMsSUFGVDtBQUdYLGdCQUFRLE1BSEc7QUFJWCxjQUFNLE1BSks7QUFLWCxpQkFBUztBQUNQLDBCQUFnQixrQkFEVDtBQUVQLDRCQUFrQixPQUFPLE1BRmxCO0FBR1AsdUNBQTJCLEtBQUssS0FBTCxDQUFXLFdBQVg7QUFIcEI7QUFMRSxPQUFiO0FBV0EsV0FBSyxPQUFMLENBQWEsVUFBYixDQUF3QixPQUF4QixDQUFnQyxNQUFoQyxFQUF3QyxRQUF4QztBQUNEOzs7Ozs7Ozs7Ozs7O3dCQVVHLEssRUFBTyxRLEVBQVU7QUFDbkIsVUFBRyxDQUFDLEtBQUosRUFBVztBQUNULGNBQU0sSUFBSSxLQUFKLENBQVUsaUNBQVYsQ0FBTjtBQUNEOztBQUVELFVBQUksVUFBVSxFQUFkO0FBQ0EsVUFBRyxPQUFPLEtBQVAsS0FBaUIsUUFBcEIsRUFBOEI7O0FBRTVCLHdCQUFjLEtBQWQ7QUFDRCxPQUhELE1BSUssSUFBRyxRQUFPLEtBQVAseUNBQU8sS0FBUCxPQUFpQixRQUFqQixJQUE2QixPQUFPLElBQVAsQ0FBWSxLQUFaLEVBQW1CLE1BQW5CLEdBQTRCLENBQTVELEVBQStEOztBQUVsRSx3QkFBYyxzQkFBWSxTQUFaLENBQXNCLEtBQXRCLENBQWQ7QUFDRDs7QUFFRCxVQUFJLFNBQVM7QUFDWCxjQUFLLGVBRE07QUFFWCxtQkFBUSxjQUFjLElBQXRCLEdBQTZCLE9BRmxCO0FBR1gsZ0JBQVEsS0FIRztBQUlYLGlCQUFTO0FBQ1AsMEJBQWdCLGtCQURUO0FBRVAsdUNBQTJCLEtBQUssS0FBTCxDQUFXLFdBQVg7QUFGcEI7QUFKRSxPQUFiO0FBU0EsV0FBSyxPQUFMLENBQWEsVUFBYixDQUF3QixPQUF4QixDQUFnQyxNQUFoQyxFQUF3QyxRQUF4QztBQUNEOzs7Ozs7Ozs7Ozs7MkJBU00sTSxFQUFRLE0sRUFBUSxRLEVBQVU7QUFDL0IsZUFBUyxLQUFLLFNBQUwsQ0FBZSxNQUFmLENBQVQ7O0FBRUEsVUFBSSxTQUFTO0FBQ1gsY0FBSyxlQURNO0FBRVgsY0FBUSxjQUFjLElBQXRCLFNBQThCLE1BRm5CO0FBR1gsZ0JBQVEsS0FIRztBQUlYLGNBQU0sTUFKSztBQUtYLGlCQUFTO0FBQ1AsMEJBQWdCLGtCQURUO0FBRVAsNEJBQWtCLE9BQU8sTUFGbEI7QUFHUCx1Q0FBMkIsS0FBSyxLQUFMLENBQVcsV0FBWDtBQUhwQjtBQUxFLE9BQWI7QUFXQSxXQUFLLE9BQUwsQ0FBYSxVQUFiLENBQXdCLE9BQXhCLENBQWdDLE1BQWhDLEVBQXdDLFFBQXhDO0FBQ0Q7Ozs7OztrQkFJWSxhIiwiZmlsZSI6IkNhbGxzUmVzb3VyY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcXVlcnlzdHJpbmcgZnJvbSAncXVlcnlzdHJpbmcnO1xuXG5pbXBvcnQgU3RyZWFtUmVzb3VyY2UgZnJvbSAnLi9TdHJlYW1SZXNvdXJjZSc7XG5pbXBvcnQgVGFsa1Jlc291cmNlIGZyb20gJy4vVGFsa1Jlc291cmNlJztcbmltcG9ydCBEdG1mUmVzb3VyY2UgZnJvbSAnLi9EdG1mUmVzb3VyY2UnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYGNhbGxzYCByZXNvdXJjZS5cbiAqL1xuY2xhc3MgQ2FsbHNSZXNvdXJjZSB7XG4gIFxuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIGBjYWxsc2AgcmVzb3VyY2UuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFBBVEgoKSB7XG4gICAgcmV0dXJuICcvdjEvY2FsbHMnO1xuICB9XG4gIFxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBDYWxsc1Jlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkcyAtIENyZWRlbnRpYWxzIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBOZXhtbyBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkcywgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkcztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIFxuICAgIC8qKlxuICAgICAqIEB0eXBlIFN0cmVhbUNvbnRyb2xsZXJcbiAgICAgKi9cbiAgICB0aGlzLnN0cmVhbSA9IG5ldyBTdHJlYW1SZXNvdXJjZSh0aGlzLmNyZWRzLCB0aGlzLm9wdGlvbnMpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIEB0eXBlIFRhbGtSZXNvdXJjZVxuICAgICAqL1xuICAgIHRoaXMudGFsayA9IG5ldyBUYWxrUmVzb3VyY2UodGhpcy5jcmVkcywgdGhpcy5vcHRpb25zKTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBAdHlwZSBEdG1mUmVzb3VyY2VcbiAgICAgKi9cbiAgICB0aGlzLmR0bWYgPSBuZXcgRHRtZlJlc291cmNlKHRoaXMuY3JlZHMsIHRoaXMub3B0aW9ucyk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFBhcmFtZXRlcnMgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBjYWxsLiBTZWUgaHR0cHM6Ly9kb2NzLmRldi5uZXhtb2luYy5uZXQvdm9pY2Uvdm9pY2UtYXBpL2FwaS1yZWZlcmVuY2UjY2FsbF9jcmVhdGUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgY3JlYXRlKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBwYXJhbXMgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6ICdhcGkubmV4bW8uY29tJyxcbiAgICAgIHBhdGg6IENhbGxzUmVzb3VyY2UuUEFUSCxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBwYXJhbXMubGVuZ3RoLFxuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdldCBhbiBleGlzdGluZyBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHF1ZXJ5IC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY2FsbCB0byByZXRyaWV2ZVxuICAgKiAgICAgICAgICAgICAgIG9yIGEgc2V0IG9mIGZpbHRlciBwYXJhbWV0ZXJzIGZvciB0aGUgcXVlcnkuIEZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAqICAgICAgICAgICAgICAgc2VlIGh0dHBzOi8vZG9jcy5uZXhtby5jb20vdm9pY2Uvdm9pY2UtYXBpL2FwaS1yZWZlcmVuY2UjY2FsbF9yZXRyaWV2ZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIGdldChxdWVyeSwgY2FsbGJhY2spIHtcbiAgICBpZighcXVlcnkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJxdWVyeVwiIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyJyk7XG4gICAgfVxuICAgIFxuICAgIHZhciBwYXRoRXh0ID0gJyc7XG4gICAgaWYodHlwZW9mIHF1ZXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gc2luZ2xlIGNhbGwgSWRcbiAgICAgIHBhdGhFeHQgPSBgLyR7cXVlcnl9YDtcbiAgICB9XG4gICAgZWxzZSBpZih0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHF1ZXJ5KS5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBmaWx0ZXJcbiAgICAgIHBhdGhFeHQgPSBgPyR7cXVlcnlzdHJpbmcuc3RyaW5naWZ5KHF1ZXJ5KX1gO1xuICAgIH1cbiAgICBcbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDonYXBpLm5leG1vLmNvbScsXG4gICAgICBwYXRoOmAke0NhbGxzUmVzb3VyY2UuUEFUSH0ke3BhdGhFeHR9YCxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG4gIFxuICAvKipcbiAgICogVXBkYXRlIGFuIGV4aXN0aW5nIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY2FsbElkXSAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNhbGwgdG8gdXBkYXRlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyB1c2VkIHdoZW4gdXBkYXRpbmcgdGhlIGNhbGwuIFNlZSBodHRwczovL2RvY3MuZGV2Lm5leG1vaW5jLm5ldC92b2ljZS92b2ljZS1hcGkvYXBpLXJlZmVyZW5jZSNjYWxsX21vZGlmeV9zaW5nbGUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgdXBkYXRlKGNhbGxJZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG5cbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDonYXBpLm5leG1vLmNvbScsXG4gICAgICBwYXRoOmAke0NhbGxzUmVzb3VyY2UuUEFUSH0vJHtjYWxsSWR9YCxcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBib2R5OiBwYXJhbXMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdDb250ZW50LUxlbmd0aCc6IHBhcmFtcy5sZW5ndGgsXG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG4gIFxufVxuXG5leHBvcnQgZGVmYXVsdCBDYWxsc1Jlc291cmNlO1xuIl19