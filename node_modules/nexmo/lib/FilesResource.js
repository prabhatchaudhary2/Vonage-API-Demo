"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = require('fs');

var FilesResource = function () {
  _createClass(FilesResource, null, [{
    key: 'PATH',


    /**
     * The path to the `calls` resource.
     */
    get: function get() {
      return '/v1/files';
    }

    /**
     * Creates a new FilesResource.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function FilesResource(creds, options) {
    _classCallCheck(this, FilesResource);

    this.creds = creds;
    this.options = options;
  }

  /**
   * Get stream for a remote File
   *
   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(FilesResource, [{
    key: 'get',
    value: function get(fileIdOrUrl, callback) {

      if (!fileIdOrUrl) {
        throw new Error('"fileIdOrUrl" is a required parameter');
      }

      fileIdOrUrl = fileIdOrUrl.split("/").pop(-1);

      var config = {
        host: 'api.nexmo.com',
        path: FilesResource.PATH + '/' + fileIdOrUrl,
        method: 'GET',
        headers: {
          'Content-Type': 'application/octet-stream',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }

    /**
     * Save remote File locally
     *
     * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
     * @param {string} [file] - Filename or file descriptor
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: 'save',
    value: function save(fileIdOrUrl, file, callback) {
      var _this = this;

      this.get(fileIdOrUrl, function (error, data) {
        if (error) {
          callback(error, null);
        } else {
          _this.__storeFile(data, file, callback);
        }
      });
    }
  }, {
    key: '__storeFile',
    value: function __storeFile(data, file, callback) {
      fs.writeFile(file, data, function (error) {
        if (error) {
          callback(error, null);
        } else {
          callback(null, file);
        }
      });
    }
  }]);

  return FilesResource;
}();

exports.default = FilesResource;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9GaWxlc1Jlc291cmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBRUEsSUFBSSxLQUFLLFFBQVEsSUFBUixDQUFUOztJQUVNLGE7Ozs7Ozs7O3dCQUtjO0FBQ2hCLGFBQU8sV0FBUDtBQUNEOzs7Ozs7Ozs7OztBQVFELHlCQUFZLEtBQVosRUFBbUIsT0FBbkIsRUFBNEI7QUFBQTs7QUFDMUIsU0FBSyxLQUFMLEdBQWEsS0FBYjtBQUNBLFNBQUssT0FBTCxHQUFlLE9BQWY7QUFDRDs7Ozs7Ozs7Ozs7O3dCQVFHLFcsRUFBYSxRLEVBQVU7O0FBRXpCLFVBQUcsQ0FBQyxXQUFKLEVBQWlCO0FBQ2YsY0FBTSxJQUFJLEtBQUosQ0FBVSx1Q0FBVixDQUFOO0FBQ0Q7O0FBRUQsb0JBQWMsWUFBWSxLQUFaLENBQWtCLEdBQWxCLEVBQXVCLEdBQXZCLENBQTJCLENBQUMsQ0FBNUIsQ0FBZDs7QUFFQSxVQUFJLFNBQVM7QUFDWCxjQUFLLGVBRE07QUFFWCxjQUFRLGNBQWMsSUFBdEIsU0FBOEIsV0FGbkI7QUFHWCxnQkFBUSxLQUhHO0FBSVgsaUJBQVM7QUFDUCwwQkFBZ0IsMEJBRFQ7QUFFUCx1Q0FBMkIsS0FBSyxLQUFMLENBQVcsV0FBWDtBQUZwQjtBQUpFLE9BQWI7O0FBVUEsV0FBSyxPQUFMLENBQWEsVUFBYixDQUF3QixPQUF4QixDQUFnQyxNQUFoQyxFQUF3QyxRQUF4QztBQUNEOzs7Ozs7Ozs7Ozs7eUJBU0ksVyxFQUFhLEksRUFBTSxRLEVBQVU7QUFBQTs7QUFDaEMsV0FBSyxHQUFMLENBQVMsV0FBVCxFQUFzQixVQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWlCO0FBQ3JDLFlBQUksS0FBSixFQUFXO0FBQ1QsbUJBQVMsS0FBVCxFQUFnQixJQUFoQjtBQUNELFNBRkQsTUFFTztBQUNMLGdCQUFLLFdBQUwsQ0FBaUIsSUFBakIsRUFBdUIsSUFBdkIsRUFBNkIsUUFBN0I7QUFDRDtBQUNGLE9BTkQ7QUFPRDs7O2dDQUVXLEksRUFBTSxJLEVBQU0sUSxFQUFVO0FBQ2hDLFNBQUcsU0FBSCxDQUFhLElBQWIsRUFBbUIsSUFBbkIsRUFBeUIsVUFBQyxLQUFELEVBQVc7QUFDbEMsWUFBSSxLQUFKLEVBQVc7QUFDVCxtQkFBUyxLQUFULEVBQWdCLElBQWhCO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsbUJBQVMsSUFBVCxFQUFlLElBQWY7QUFDRDtBQUNGLE9BTkQ7QUFPRDs7Ozs7O2tCQUlZLGEiLCJmaWxlIjoiRmlsZXNSZXNvdXJjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jbGFzcyBGaWxlc1Jlc291cmNlIHtcblxuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIGBjYWxsc2AgcmVzb3VyY2UuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFBBVEgoKSB7XG4gICAgcmV0dXJuICcvdjEvZmlsZXMnO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRmlsZXNSZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZHMgLSBDcmVkZW50aWFscyB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgTmV4bW8gQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGNsYXNzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3RyZWFtIGZvciBhIHJlbW90ZSBGaWxlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZUlkT3JVcmxdIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9yIFVSTCBmb3IgdGhlIGZpbGVcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBnZXQoZmlsZUlkT3JVcmwsIGNhbGxiYWNrKSB7XG5cbiAgICBpZighZmlsZUlkT3JVcmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJmaWxlSWRPclVybFwiIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyJyk7XG4gICAgfVxuXG4gICAgZmlsZUlkT3JVcmwgPSBmaWxlSWRPclVybC5zcGxpdChcIi9cIikucG9wKC0xKTtcblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBob3N0OidhcGkubmV4bW8uY29tJyxcbiAgICAgIHBhdGg6YCR7RmlsZXNSZXNvdXJjZS5QQVRIfS8ke2ZpbGVJZE9yVXJsfWAsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoY29uZmlnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSByZW1vdGUgRmlsZSBsb2NhbGx5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZUlkT3JVcmxdIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9yIFVSTCBmb3IgdGhlIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtmaWxlXSAtIEZpbGVuYW1lIG9yIGZpbGUgZGVzY3JpcHRvclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIHNhdmUoZmlsZUlkT3JVcmwsIGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5nZXQoZmlsZUlkT3JVcmwsIChlcnJvciwgZGF0YSkgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX19zdG9yZUZpbGUoZGF0YSwgZmlsZSwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBfX3N0b3JlRmlsZShkYXRhLCBmaWxlLCBjYWxsYmFjaykge1xuICAgIGZzLndyaXRlRmlsZShmaWxlLCBkYXRhLCAoZXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVzUmVzb3VyY2U7XG4iXX0=