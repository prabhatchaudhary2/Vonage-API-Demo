'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `talk` resource.
 */

var TalkResource = function () {
  _createClass(TalkResource, null, [{
    key: 'PATH',


    /**
     * The path to the `talk` resource.
     */
    get: function get() {
      return '/v1/calls/{call_uuid}/talk';
    }

    /**
     * Creates a new TalkResource.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function TalkResource(creds, options) {
    _classCallCheck(this, TalkResource);

    this.creds = creds;
    this.options = options;
  }

  /**
   * Starts a talk in a call.
   *
   * @param {Object} params - Parameters used when starting the talk. See https://docs.dev.nexmoinc.net/voice/voice-api/api-reference#talk_put for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(TalkResource, [{
    key: 'start',
    value: function start(callId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: 'api.nexmo.com',
        path: TalkResource.PATH.replace('{call_uuid}', callId),
        method: 'PUT',
        body: params,
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': params.length,
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Stop a talk in a call.
     *
     * @param {string} callId - The unique identifier for the call for the talk to be stopped in.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: 'stop',
    value: function stop(callId, callback) {
      var config = {
        host: 'api.nexmo.com',
        path: TalkResource.PATH.replace('{call_uuid}', callId),
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }
  }]);

  return TalkResource;
}();

exports.default = TalkResource;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UYWxrUmVzb3VyY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0lBS00sWTs7Ozs7Ozs7d0JBS2M7QUFDaEIsYUFBTyw0QkFBUDtBQUNEOzs7Ozs7Ozs7OztBQVFELHdCQUFZLEtBQVosRUFBbUIsT0FBbkIsRUFBNEI7QUFBQTs7QUFDMUIsU0FBSyxLQUFMLEdBQWEsS0FBYjtBQUNBLFNBQUssT0FBTCxHQUFlLE9BQWY7QUFDRDs7Ozs7Ozs7Ozs7OzBCQVFLLE0sRUFBUSxNLEVBQVEsUSxFQUFVO0FBQzlCLGVBQVMsS0FBSyxTQUFMLENBQWUsTUFBZixDQUFUOztBQUVBLFVBQUksU0FBUztBQUNYLGNBQU0sZUFESztBQUVYLGNBQU0sYUFBYSxJQUFiLENBQWtCLE9BQWxCLENBQTBCLGFBQTFCLEVBQXlDLE1BQXpDLENBRks7QUFHWCxnQkFBUSxLQUhHO0FBSVgsY0FBTSxNQUpLO0FBS1gsaUJBQVM7QUFDUCwwQkFBZ0Isa0JBRFQ7QUFFUCw0QkFBa0IsT0FBTyxNQUZsQjtBQUdQLHVDQUEyQixLQUFLLEtBQUwsQ0FBVyxXQUFYO0FBSHBCO0FBTEUsT0FBYjtBQVdBLFdBQUssT0FBTCxDQUFhLFVBQWIsQ0FBd0IsT0FBeEIsQ0FBZ0MsTUFBaEMsRUFBd0MsUUFBeEM7QUFDRDs7Ozs7Ozs7Ozs7eUJBUUksTSxFQUFRLFEsRUFBVTtBQUNyQixVQUFJLFNBQVM7QUFDWCxjQUFLLGVBRE07QUFFWCxjQUFNLGFBQWEsSUFBYixDQUFrQixPQUFsQixDQUEwQixhQUExQixFQUF5QyxNQUF6QyxDQUZLO0FBR1gsZ0JBQVEsUUFIRztBQUlYLGlCQUFTO0FBQ1AsMEJBQWdCLGtCQURUO0FBRVAsdUNBQTJCLEtBQUssS0FBTCxDQUFXLFdBQVg7QUFGcEI7QUFKRSxPQUFiO0FBU0EsV0FBSyxPQUFMLENBQWEsVUFBYixDQUF3QixPQUF4QixDQUFnQyxNQUFoQyxFQUF3QyxRQUF4QztBQUNEOzs7Ozs7a0JBSVksWSIsImZpbGUiOiJUYWxrUmVzb3VyY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcXVlcnlzdHJpbmcgZnJvbSAncXVlcnlzdHJpbmcnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYHRhbGtgIHJlc291cmNlLlxuICovXG5jbGFzcyBUYWxrUmVzb3VyY2Uge1xuICBcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoZSBgdGFsa2AgcmVzb3VyY2UuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFBBVEgoKSB7XG4gICAgcmV0dXJuICcvdjEvY2FsbHMve2NhbGxfdXVpZH0vdGFsayc7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRhbGtSZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZHMgLSBDcmVkZW50aWFscyB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgTmV4bW8gQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGNsYXNzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY3JlZHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBcbiAgLyoqXG4gICAqIFN0YXJ0cyBhIHRhbGsgaW4gYSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyB1c2VkIHdoZW4gc3RhcnRpbmcgdGhlIHRhbGsuIFNlZSBodHRwczovL2RvY3MuZGV2Lm5leG1vaW5jLm5ldC92b2ljZS92b2ljZS1hcGkvYXBpLXJlZmVyZW5jZSN0YWxrX3B1dCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBzdGFydChjYWxsSWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBwYXJhbXMgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6ICdhcGkubmV4bW8uY29tJyxcbiAgICAgIHBhdGg6IFRhbGtSZXNvdXJjZS5QQVRILnJlcGxhY2UoJ3tjYWxsX3V1aWR9JywgY2FsbElkKSxcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBib2R5OiBwYXJhbXMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdDb250ZW50LUxlbmd0aCc6IHBhcmFtcy5sZW5ndGgsXG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gXG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG4gIFxuICAvKipcbiAgICogU3RvcCBhIHRhbGsgaW4gYSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbElkIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY2FsbCBmb3IgdGhlIHRhbGsgdG8gYmUgc3RvcHBlZCBpbi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBzdG9wKGNhbGxJZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDonYXBpLm5leG1vLmNvbScsXG4gICAgICBwYXRoOiBUYWxrUmVzb3VyY2UuUEFUSC5yZXBsYWNlKCd7Y2FsbF91dWlkfScsIGNhbGxJZCksXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxuICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFsa1Jlc291cmNlO1xuIl19