'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `stream` resource.
 */

var StreamResource = function () {
  _createClass(StreamResource, null, [{
    key: 'PATH',


    /**
     * The path to the `stream` resource.
     */
    get: function get() {
      return '/v1/calls/{call_uuid}/stream';
    }

    /**
     * Creates a new StreamResource.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function StreamResource(creds, options) {
    _classCallCheck(this, StreamResource);

    this.creds = creds;
    this.options = options;
  }

  /**
   * Starts a stream in a call.
   *
   * @param {Object} params - Parameters used when starting the stream. See https://docs.dev.nexmoinc.net/voice/voice-api/api-reference#stream_put for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(StreamResource, [{
    key: 'start',
    value: function start(callId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: 'api.nexmo.com',
        path: StreamResource.PATH.replace('{call_uuid}', callId),
        method: 'PUT',
        body: params,
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': params.length,
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Stop a stream in a call.
     *
     * @param {string} callId - The unique identifier for the call for the stream to be stopped in.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: 'stop',
    value: function stop(callId, callback) {
      var config = {
        host: 'api.nexmo.com',
        path: StreamResource.PATH.replace('{call_uuid}', callId),
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }
  }]);

  return StreamResource;
}();

exports.default = StreamResource;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TdHJlYW1SZXNvdXJjZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7SUFLTSxjOzs7Ozs7Ozt3QkFLYztBQUNoQixhQUFPLDhCQUFQO0FBQ0Q7Ozs7Ozs7Ozs7O0FBUUQsMEJBQVksS0FBWixFQUFtQixPQUFuQixFQUE0QjtBQUFBOztBQUMxQixTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsU0FBSyxPQUFMLEdBQWUsT0FBZjtBQUNEOzs7Ozs7Ozs7Ozs7MEJBUUssTSxFQUFRLE0sRUFBUSxRLEVBQVU7QUFDOUIsZUFBUyxLQUFLLFNBQUwsQ0FBZSxNQUFmLENBQVQ7O0FBRUEsVUFBSSxTQUFTO0FBQ1gsY0FBTSxlQURLO0FBRVgsY0FBTSxlQUFlLElBQWYsQ0FBb0IsT0FBcEIsQ0FBNEIsYUFBNUIsRUFBMkMsTUFBM0MsQ0FGSztBQUdYLGdCQUFRLEtBSEc7QUFJWCxjQUFNLE1BSks7QUFLWCxpQkFBUztBQUNQLDBCQUFnQixrQkFEVDtBQUVQLDRCQUFrQixPQUFPLE1BRmxCO0FBR1AsdUNBQTJCLEtBQUssS0FBTCxDQUFXLFdBQVg7QUFIcEI7QUFMRSxPQUFiO0FBV0EsV0FBSyxPQUFMLENBQWEsVUFBYixDQUF3QixPQUF4QixDQUFnQyxNQUFoQyxFQUF3QyxRQUF4QztBQUNEOzs7Ozs7Ozs7Ozt5QkFRSSxNLEVBQVEsUSxFQUFVO0FBQ3JCLFVBQUksU0FBUztBQUNYLGNBQUssZUFETTtBQUVYLGNBQU0sZUFBZSxJQUFmLENBQW9CLE9BQXBCLENBQTRCLGFBQTVCLEVBQTJDLE1BQTNDLENBRks7QUFHWCxnQkFBUSxRQUhHO0FBSVgsaUJBQVM7QUFDUCwwQkFBZ0Isa0JBRFQ7QUFFUCx1Q0FBMkIsS0FBSyxLQUFMLENBQVcsV0FBWDtBQUZwQjtBQUpFLE9BQWI7QUFTQSxXQUFLLE9BQUwsQ0FBYSxVQUFiLENBQXdCLE9BQXhCLENBQWdDLE1BQWhDLEVBQXdDLFFBQXhDO0FBQ0Q7Ozs7OztrQkFJWSxjIiwiZmlsZSI6IlN0cmVhbVJlc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHF1ZXJ5c3RyaW5nIGZyb20gJ3F1ZXJ5c3RyaW5nJztcblxuLyoqXG4gKiBQcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGBzdHJlYW1gIHJlc291cmNlLlxuICovXG5jbGFzcyBTdHJlYW1SZXNvdXJjZSB7XG4gIFxuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIGBzdHJlYW1gIHJlc291cmNlLlxuICAgKi9cbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiAnL3YxL2NhbGxzL3tjYWxsX3V1aWR9L3N0cmVhbSc7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFN0cmVhbVJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkcyAtIENyZWRlbnRpYWxzIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBOZXhtbyBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkcywgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkcztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIFxuICAvKipcbiAgICogU3RhcnRzIGEgc3RyZWFtIGluIGEgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFBhcmFtZXRlcnMgdXNlZCB3aGVuIHN0YXJ0aW5nIHRoZSBzdHJlYW0uIFNlZSBodHRwczovL2RvY3MuZGV2Lm5leG1vaW5jLm5ldC92b2ljZS92b2ljZS1hcGkvYXBpLXJlZmVyZW5jZSNzdHJlYW1fcHV0IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIHN0YXJ0KGNhbGxJZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHBhcmFtcyA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG5cbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDogJ2FwaS5uZXhtby5jb20nLFxuICAgICAgcGF0aDogU3RyZWFtUmVzb3VyY2UuUEFUSC5yZXBsYWNlKCd7Y2FsbF91dWlkfScsIGNhbGxJZCksXG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBwYXJhbXMubGVuZ3RoLFxuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIFN0b3AgYSBzdHJlYW0gaW4gYSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbElkIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY2FsbCBmb3IgdGhlIHN0cmVhbSB0byBiZSBzdG9wcGVkIGluLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIHN0b3AoY2FsbElkLCBjYWxsYmFjaykge1xuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBob3N0OidhcGkubmV4bW8uY29tJyxcbiAgICAgIHBhdGg6IFN0cmVhbVJlc291cmNlLlBBVEgucmVwbGFjZSgne2NhbGxfdXVpZH0nLCBjYWxsSWQpLFxuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWBcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoY29uZmlnLCBjYWxsYmFjayk7XG4gIH1cbiAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0cmVhbVJlc291cmNlO1xuIl19