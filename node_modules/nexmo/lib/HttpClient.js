'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var https = require('https');
var http = require('http');

var HttpClient = function () {
  function HttpClient(options) {
    _classCallCheck(this, HttpClient);

    this.port = 443 || options.port;
    this.https = options.https || https;
    this.http = options.http || http;
    this.headers = {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Accept': 'application/json'
    };
    this.logger = options.logger;

    if (options.userAgent) {
      this.headers['User-Agent'] = options.userAgent;
    }
  }

  _createClass(HttpClient, [{
    key: 'request',
    value: function request(endpoint, method, callback) {
      var _this = this;

      if (typeof method == 'function') {
        callback = method;
        endpoint.method = endpoint.method || 'GET';
      } else if (typeof method !== 'undefined') {
        endpoint.method = method;
      }

      if (endpoint.method == 'POST' || endpoint.method == 'DELETE') {
        // TODO: verify the following fix is required
        // Fix broken due ot 411 Content-Length error now sent by Nexmo API
        // PL 2016-Sept-6 - commented out Content-Length 0
        // headers['Content-Length'] = 0;
      }
      var options = {
        host: endpoint.host ? endpoint.host : 'rest.nexmo.com',
        port: this.port,
        path: endpoint.path,
        method: endpoint.method,
        headers: this.headers
      };

      // Allow existing headers to be overridden
      // Allow new headers to be added
      if (endpoint.headers) {
        Object.keys(endpoint.headers).forEach(function (key) {
          options.headers[key] = endpoint.headers[key];
        });
      }

      this.logger.info('Request:', options, '\nBody:', endpoint.body);
      var request;

      if (options.port == 443) {
        request = this.https.request(options);
      } else {
        request = http.request(options);
      }

      request.end(endpoint.body);

      // Keep an array of String or Buffers,
      // depending on content type (binary or JSON) of response
      var responseData = [];

      request.on('response', function (response) {
        var isBinary = response.headers['content-type'] === 'application/octet-stream';
        if (!isBinary) {
          response.setEncoding('utf8');
        }

        response.on('data', function (chunk) {
          responseData.push(chunk);
        });

        response.on('end', function () {
          _this.logger.info('response ended:', response.statusCode);
          if (callback) {
            if (isBinary) {
              responseData = Buffer.concat(responseData);
            }

            _this.__parseReponse(response.status, response.headers['content-type'], responseData, method, callback);
          }
        });
        response.on('close', function (e) {
          _this.logger.error('problem with API request detailed stacktrace below ');
          _this.logger.error(e);
          callback(e);
        });
      });
      request.on('error', function (e) {
        _this.logger.error('problem with API request detailed stacktrace below ');
        _this.logger.error(e);
        callback(e);
      });
    }
  }, {
    key: '__parseReponse',
    value: function __parseReponse(status, contentType, data, method, callback) {
      var response = null;
      var error = null;

      try {
        if (status >= 500) {
          error = { message: 'Server Error: ' + status };
        } else if (status >= 400 || status < 200) {
          error = JSON.parse(data);
        } else if (contentType === 'application/octet-stream') {
          response = data;
        } else if (method !== 'DELETE') {
          response = JSON.parse(data);
        } else {
          response = data;
        }
      } catch (parseError) {
        this.logger.error(parseError);
        this.logger.error('could not convert API response to JSON, above error is ignored and raw API response is returned to client');
        this.logger.error('Raw Error message from API ');
        this.logger.error(data);

        error = {
          message: "The API response could not be parsed.",
          parseError: parseError
        };
      }

      callback(error, response);
    }
  }]);

  return HttpClient;
}();

exports.default = HttpClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,